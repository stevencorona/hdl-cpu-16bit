/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications.
 */


CHIP Memory {
  IN in[16], load, address[15];
  OUT out[16];
  
  PARTS:
  
  // Figure out if bit 13 and bit 14 are flipped to on.
  // If 14 is on, it means address is mapped to the screen
  // If 14&13 are on, it means address is mapped to the keyboard
  
  // AND the whole word by true and grab bits 13 & 14. They will be true if
  // they were flipped on
  And16(a[15]=false,a[0..14]=address,b=true,out[14]=usescreen,out[13]=usekbd);
  
  // Demux the load bit using usescreen. If use map is true, we won't load into
  // ram.
  DMux(in=load,sel=usescreen,a=loadram,b=loadother);
  
  // Hit up the RAM. Only load if it's in the target address range
  RAM16K(in=in, load=loadram, address=address[0..13], out=outram);

  // 16384-24575 is mapped to the screen
  // 24576 is mapped to the keyboard
  
  // Figure out if the address is mapped to the screen or the keyboard
  // AND bits 13 & 14 together. If they are both on, it'll set usekbd1 on
  And(a=usescreen,b=usekbd,out=usekbd1);
  
  // DMux the whole thing to figure out if we use the load bit for the screen.
  DMux4Way(in=loadother, sel[0]=usekbd1,a=loadscreen,b=false);
  
  
  Screen(in=in,load=loadscreen,address=address[0..12],out=outscreen);
  Keyboard(out=outkbd);
  
  // Connect the correct output to out
  Mux4Way16(
    a=outram,
    b=outscreen,
    c=outram,
    d=outkbd,
    sel[0]=usescreen,
    sel[1]=usekbd,
    out=out);
  
  
}
